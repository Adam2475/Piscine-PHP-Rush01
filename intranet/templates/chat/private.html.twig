{% extends 'base.html.twig' %}

{% block title %}Chat con {{ recipient.firstName }} {{ recipient.lastName }}{% endblock %}

{% block body %}
<div class="chat-container">
    <div class="chat-header">
        <a href="{{ path('chat_index') }}" class="back-btn">‚Üê Return to chat</a>
        <h2>{{ recipient.firstName }} {{ recipient.lastName }}</h2>
    </div>

    <div id="chat-messages" class="chat-messages">
    </div>
    
    <div class="chat-input">
        <form id="chat-form" enctype="multipart/form-data">
            <div class="input-group">
                <input type="text" id="message-input" placeholder="Type a message..." maxlength="1000">
                <input type="file" id="media-input" accept="image/*,video/*,audio/*,.pdf,.doc,.docx" style="display: none;">
                <button type="button" id="media-btn" class="media-btn" title="Attach file">üìé</button>
                <button type="submit">Send</button>
            </div>
            <div id="file-preview" class="file-preview" style="display: none;"></div>
        </form>
    </div>
</div>

<style>
.chat-container {
    max-width: 800px;
    margin: 2rem auto;
    height: 80vh;
    display: flex;
    flex-direction: column;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
}

.chat-header {
    padding: 1rem;
    background: #007bff;
    color: white;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.back-btn {
    color: white;
    text-decoration: none;
    font-weight: bold;
}

.back-btn:hover {
    text-decoration: underline;
}

.chat-messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    background: white;
}

.message {
    margin-bottom: 1rem;
    padding: 0.5rem;
    border-radius: 8px;
    max-width: 70%;
}

.message.sent {
    background: #007bff;
    color: white;
    margin-left: auto;
    text-align: right;
}

.message.received {
    background: #e9ecef;
    color: #333;
}

.message-meta {
    font-size: 0.8rem;
    opacity: 0.7;
    margin-top: 0.25rem;
}

.chat-input {
    padding: 1rem;
    border-top: 1px solid #ddd;
    background: #f8f9fa;
}

.input-group {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.chat-input input[type="text"] {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 25px;
    font-size: 14px;
}

.media-btn {
    padding: 0.75rem;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    font-size: 16px;
    width: 45px;
    height: 45px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s;
}

.media-btn:hover {
    background: #5a6268;
}

.chat-input button[type="submit"] {
    padding: 0.75rem 1.5rem;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
}

.chat-input button[type="submit"]:hover {
    background: #0056b3;
}

.file-preview {
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
}

.file-preview img {
    max-width: 100px;
    max-height: 100px;
    border-radius: 4px;
}

.message.media {
    max-width: 85%;
}

.message img, .message video {
    max-width: 100%;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.message audio {
    width: 100%;
    margin-top: 0.5rem;
}

.message .file-link {
    display: inline-block;
    padding: 0.5rem;
    background: rgba(255,255,255,0.2);
    border-radius: 4px;
    color: inherit;
    text-decoration: none;
    margin-top: 0.5rem;
}

.message .file-link:hover {
    background: rgba(255,255,255,0.3);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const recipientId = {{ recipient.id }};
    const currentUserId = {{ app.user.id }};
    let pollInterval;

    // Load initial messages
    loadMessages();
    
    // Start polling for new messages
    startPolling();
    
    // Chat form submission
    document.getElementById('chat-form').addEventListener('submit', function(e) {
        e.preventDefault();
        sendMessage();
    });

    // Media button click
    document.getElementById('media-btn').addEventListener('click', function() {
        document.getElementById('media-input').click();
    });

    // File input change
    document.getElementById('media-input').addEventListener('change', function() {
        const file = this.files[0];
        if (file) {
            showFilePreview(file);
        }
    });

    function loadMessages() {
        fetch(`/chat/api/messages/private/${recipientId}`)
            .then(response => response.json())
            .then(messages => {
                displayMessages(messages);
            })
            .catch(error => console.error('Error:', error));
    }

    function displayMessages(messages) {
        const messagesContainer = document.getElementById('chat-messages');
        
        messagesContainer.innerHTML = messages.map(message => {
            const isSent = message.sender.id === currentUserId;
            const messageClass = isSent ? 'sent' : 'received';
            const time = new Date(message.createdAt).toLocaleTimeString('it-IT', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            let mediaContent = '';
            if (message.mediaUrl) {
                const fileExt = message.mediaUrl.split('.').pop().toLowerCase();
                if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(fileExt)) {
                    mediaContent = `<img src="${message.mediaUrl}" alt="Immagine">`;
                } else if (['mp4', 'webm', 'ogg'].includes(fileExt)) {
                    mediaContent = `<video controls><source src="${message.mediaUrl}"></video>`;
                } else if (['mp3', 'wav', 'ogg'].includes(fileExt)) {
                    mediaContent = `<audio controls><source src="${message.mediaUrl}"></audio>`;
                } else {
                    mediaContent = `<a href="${message.mediaUrl}" class="file-link" target="_blank">üìé ${message.mediaName || 'File allegato'}</a>`;
                }
            }
            
            return `
                <div class="message ${messageClass} ${message.mediaUrl ? 'media' : ''}">
                    <div class="message-content">${message.content}</div>
                    ${mediaContent}
                    <div class="message-meta">${time}</div>
                </div>
            `;
        }).join('');
        
        // Scroll to bottom
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function sendMessage() {
        const input = document.getElementById('message-input');
        const fileInput = document.getElementById('media-input');
        const content = input.value.trim();
        const file = fileInput.files[0];
        
        if (!content && !file) return;
        
        const formData = new FormData();
        if (content) formData.append('content', content);
        if (file) formData.append('media', file);
        formData.append('type', 'private');
        formData.append('recipientId', recipientId);
        
        fetch('/chat/api/send', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert(data.error);
            } else {
                input.value = '';
                fileInput.value = '';
                hideFilePreview();
                loadMessages(); // Reload messages to show the new one
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function showFilePreview(file) {
        const preview = document.getElementById('file-preview');
        const fileExt = file.name.split('.').pop().toLowerCase();
        
        let previewContent = '';
        if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(fileExt)) {
            const reader = new FileReader();
            reader.onload = function(e) {
                previewContent = `
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <img src="${e.target.result}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">
                        <span>${file.name}</span>
                        <button type="button" onclick="hideFilePreview()" style="margin-left: auto; background: #dc3545; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer;">√ó</button>
                    </div>
                `;
                preview.innerHTML = previewContent;
            };
            reader.readAsDataURL(file);
        } else {
            previewContent = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <span>üìé ${file.name}</span>
                    <button type="button" onclick="hideFilePreview()" style="margin-left: auto; background: #dc3545; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer;">√ó</button>
                </div>
            `;
            preview.innerHTML = previewContent;
        }
        
        preview.style.display = 'block';
    }

    function hideFilePreview() {
        const preview = document.getElementById('file-preview');
        const fileInput = document.getElementById('media-input');
        preview.style.display = 'none';
        preview.innerHTML = '';
        fileInput.value = '';
    }

    // Make hideFilePreview global
    window.hideFilePreview = hideFilePreview;

    function startPolling() {
        pollInterval = setInterval(() => {
            loadMessages();
        }, 3000); // Poll every 3 seconds
    }

    // Cleanup on page unload
    window.addEventListener('beforeunload', function() {
        if (pollInterval) {
            clearInterval(pollInterval);
        }
    });
});
</script>
{% endblock %}
