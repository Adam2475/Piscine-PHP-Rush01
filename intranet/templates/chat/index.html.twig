{% extends 'base.html.twig' %}

{% block title %}Chat{% endblock %}

{% block body %}
<div class="chat-container">
    <div class="chat-sidebar">
        <h3>Chat</h3>
        <div class="chat-tabs">
            <button class="tab-btn active" data-tab="conversations">Conversations</button>
            <button class="tab-btn" data-tab="users">Users</button>
        </div>
        
        <div id="conversations-tab" class="tab-content active">
            <div class="conversations-list">
            </div>
        </div>
        
        <div id="users-tab" class="tab-content">
            <div class="users-search">
                <input type="text" id="user-search" placeholder="Find users...">
                <div id="users-list" class="users-list">
                </div>
            </div>
        </div>
    </div>
    
    <div class="chat-main">
        <div id="chat-header" class="chat-header">
            <span>Select a conversation</span>
        </div>
        
        <div id="chat-messages" class="chat-messages">
            <div class="no-chat-selected">
                <p>Select a user or a conversation to start chatting</p>
            </div>
        </div>
        
        <div id="chat-input-container" class="chat-input" style="display: none;">
            <form id="chat-form" enctype="multipart/form-data">
                <div class="input-group">
                    <input type="text" id="message-input" placeholder="Type a message..." maxlength="1000">
                    <input type="file" id="media-input" accept="image/*,video/*,audio/*,.pdf,.doc,.docx" style="display: none;">
                    <button type="button" id="media-btn" class="media-btn" title="Attach file">ðŸ“Ž</button>
                    <button type="submit">Send</button>
                </div>
                <div id="file-preview" class="file-preview" style="display: none;"></div>
            </form>
        </div>
    </div>
</div>

<style>
.chat-container {
    display: flex;
    height: 80vh;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
}

.chat-sidebar {
    width: 300px;
    background: #f8f9fa;
    border-right: 1px solid #ddd;
    display: flex;
    flex-direction: column;
}

.chat-sidebar h3 {
    padding: 1rem;
    margin: 0;
    background: #007bff;
    color: white;
}

.chat-tabs {
    display: flex;
    border-bottom: 1px solid #ddd;
}

.tab-btn {
    flex: 1;
    padding: 0.75rem;
    border: none;
    background: #6c757d;
    color: white;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
}

.tab-btn:hover {
    background: #5a6268;
}

.tab-btn.active {
    background: #007bff;
    color: white;
    border-bottom: 3px solid #0056b3;
}

.tab-content {
    display: none;
    flex: 1;
    overflow-y: auto;
}

.tab-content.active {
    display: block;
}

.chat-main {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.chat-header {
    padding: 1rem;
    background: #007bff;
    color: white;
    font-weight: bold;
}

.chat-messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    background: white;
}

.no-chat-selected {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6c757d;
}

.message {
    margin-bottom: 1rem;
    padding: 0.5rem;
    border-radius: 8px;
    max-width: 70%;
}

.message.sent {
    background: #007bff;
    color: white;
    margin-left: auto;
    text-align: right;
}

.message.received {
    background: #e9ecef;
    color: #333;
}

.message-meta {
    font-size: 0.8rem;
    opacity: 0.7;
    margin-top: 0.25rem;
}

.chat-input {
    padding: 1rem;
    border-top: 1px solid #ddd;
    background: #f8f9fa;
}

.input-group {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.chat-input input[type="text"] {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 25px;
    font-size: 14px;
}

.media-btn {
    padding: 0.75rem;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    font-size: 16px;
    width: 45px;
    height: 45px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s;
}

.media-btn:hover {
    background: #5a6268;
}

.chat-input button[type="submit"] {
    padding: 0.75rem 1.5rem;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
}

.chat-input button[type="submit"]:hover {
    background: #0056b3;
}

.file-preview {
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
}

.file-preview img {
    max-width: 100px;
    max-height: 100px;
    border-radius: 4px;
}

.message.media {
    max-width: 85%;
}

.message img, .message video {
    max-width: 100%;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.message audio {
    width: 100%;
    margin-top: 0.5rem;
}

.message .file-link {
    display: inline-block;
    padding: 0.5rem;
    background: rgba(255,255,255,0.2);
    border-radius: 4px;
    color: inherit;
    text-decoration: none;
    margin-top: 0.5rem;
}

.message .file-link:hover {
    background: rgba(255,255,255,0.3);
}

.user-item, .conversation-item {
    padding: 0.75rem;
    border-bottom: 1px solid #eee;
    cursor: pointer;
    transition: background 0.2s;
}

.user-item:hover, .conversation-item:hover {
    background: #e9ecef;
}

.user-item.active, .conversation-item.active {
    background: #007bff;
    color: white;
}

.users-search input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin: 0.5rem;
    box-sizing: border-box;
}

.users-list {
    max-height: 400px;
    overflow-y: auto;
}

.unread-badge {
    background: #dc3545;
    color: white;
    border-radius: 50%;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    margin-left: auto;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentRecipientId = null;
    let currentProjectId = null;
    let chatType = 'private';
    let pollInterval = null;

    // Check if there's a user parameter in URL
    const urlParams = new URLSearchParams(window.location.search);
    const userParam = urlParams.get('user');
    if (userParam) {
        // Auto-start chat with this user
        setTimeout(() => {
            startPrivateChat(userParam);
        }, 500);
    }

    // Tab switching
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const tabName = this.dataset.tab;
            
            // Update active tab button
            document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            // Update active tab content
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(tabName + '-tab').classList.add('active');
            
            if (tabName === 'users') {
                loadUsers();
            }
        });
    });

    // User search
    document.getElementById('user-search').addEventListener('input', function() {
        const query = this.value;
        if (query.length > 2) {
            searchUsers(query);
        } else {
            document.getElementById('users-list').innerHTML = '';
        }
    });

    // Chat form submission
    document.getElementById('chat-form').addEventListener('submit', function(e) {
        e.preventDefault();
        sendMessage();
    });

    // Media button click
    document.getElementById('media-btn').addEventListener('click', function() {
        document.getElementById('media-input').click();
    });

    // File input change
    document.getElementById('media-input').addEventListener('change', function() {
        const file = this.files[0];
        if (file) {
            showFilePreview(file);
        }
    });

    // Functions
    function loadUsers() {
        fetch('/api/search/users?q=')
            .then(response => response.json())
            .then(users => {
                const usersList = document.getElementById('users-list');
                usersList.innerHTML = users.map(user => `
                    <div class="user-item" data-user-id="${user.id}">
                        <strong>${user.firstName} ${user.lastName}</strong><br>
                        <small>${user.email}</small>
                    </div>
                `).join('');
                
                // Add click listeners
                usersList.querySelectorAll('.user-item').forEach(item => {
                    item.addEventListener('click', function() {
                        const userId = this.dataset.userId;
                        startPrivateChat(userId);
                    });
                });
            });
    }

    function searchUsers(query) {
        fetch(`/api/search/users?q=${encodeURIComponent(query)}`)
            .then(response => response.json())
            .then(users => {
                const usersList = document.getElementById('users-list');
                usersList.innerHTML = users.map(user => `
                    <div class="user-item" data-user-id="${user.id}">
                        <strong>${user.firstName} ${user.lastName}</strong><br>
                        <small>${user.email}</small>
                    </div>
                `).join('');
                
                // Add click listeners
                usersList.querySelectorAll('.user-item').forEach(item => {
                    item.addEventListener('click', function() {
                        const userId = this.dataset.userId;
                        startPrivateChat(userId);
                    });
                });
            });
    }

    function startPrivateChat(userId) {
        currentRecipientId = userId;
        currentProjectId = null;
        chatType = 'private';
        
        document.querySelectorAll('.user-item, .conversation-item').forEach(item => {
            item.classList.remove('active');
        });
        document.querySelector(`[data-user-id="${userId}"]`).classList.add('active');
        
        loadMessages();
        
        document.getElementById('chat-input-container').style.display = 'block';
        
        startPolling();
        
        fetch(`/api/search/users?q=`)
            .then(response => response.json())
            .then(users => {
                const user = users.find(u => u.id == userId);
                if (user) {
                    document.getElementById('chat-header').textContent = `${user.firstName} ${user.lastName}`;
                }
            });
    }

    function loadMessages() {
        let url;
        if (chatType === 'private') {
            url = `/chat/api/messages/private/${currentRecipientId}`;
        } else {
            url = `/chat/api/messages/project/${currentProjectId}`;
        }
        
        fetch(url)
            .then(response => response.json())
            .then(messages => {
                displayMessages(messages);
            })
            .catch(error => console.error('Error:', error));
    }

    function displayMessages(messages) {
        const messagesContainer = document.getElementById('chat-messages');
        const currentUserId = {{ app.user.id }};
        
        messagesContainer.innerHTML = messages.map(message => {
            const isSent = message.sender.id === currentUserId;
            const messageClass = isSent ? 'sent' : 'received';
            const time = new Date(message.createdAt).toLocaleTimeString('it-IT', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            let mediaContent = '';
            if (message.mediaUrl) {
                const fileExt = message.mediaUrl.split('.').pop().toLowerCase();
                if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(fileExt)) {
                    mediaContent = `<img src="${message.mediaUrl}" alt="Immagine">`;
                } else if (['mp4', 'webm', 'ogg'].includes(fileExt)) {
                    mediaContent = `<video controls><source src="${message.mediaUrl}"></video>`;
                } else if (['mp3', 'wav', 'ogg'].includes(fileExt)) {
                    mediaContent = `<audio controls><source src="${message.mediaUrl}"></audio>`;
                } else {
                    mediaContent = `<a href="${message.mediaUrl}" class="file-link" target="_blank">ðŸ“Ž ${message.mediaName || 'File allegato'}</a>`;
                }
            }
            
            return `
                <div class="message ${messageClass} ${message.mediaUrl ? 'media' : ''}">
                    <div class="message-content">${message.content}</div>
                    ${mediaContent}
                    <div class="message-meta">
                        ${!isSent ? message.sender.firstName + ' ' + message.sender.lastName + ' - ' : ''}${time}
                    </div>
                </div>
            `;
        }).join('');
        
        // Scroll to bottom
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function sendMessage() {
        const input = document.getElementById('message-input');
        const fileInput = document.getElementById('media-input');
        const content = input.value.trim();
        const file = fileInput.files[0];
        
        if (!content && !file) return;
        
        const formData = new FormData();
        if (content) formData.append('content', content);
        if (file) formData.append('media', file);
        formData.append('type', chatType);
        
        if (chatType === 'private') {
            formData.append('recipientId', currentRecipientId);
        } else {
            formData.append('projectId', currentProjectId);
        }
        
        fetch('/chat/api/send', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert(data.error);
            } else {
                input.value = '';
                fileInput.value = '';
                hideFilePreview();
                loadMessages(); // Reload messages to show the new one
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function showFilePreview(file) {
        const preview = document.getElementById('file-preview');
        const fileExt = file.name.split('.').pop().toLowerCase();
        
        let previewContent = '';
        if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(fileExt)) {
            const reader = new FileReader();
            reader.onload = function(e) {
                previewContent = `
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <img src="${e.target.result}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">
                        <span>${file.name}</span>
                        <button type="button" onclick="hideFilePreview()" style="margin-left: auto; background: #dc3545; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer;">Ã—</button>
                    </div>
                `;
                preview.innerHTML = previewContent;
            };
            reader.readAsDataURL(file);
        } else {
            previewContent = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <span>ðŸ“Ž ${file.name}</span>
                    <button type="button" onclick="hideFilePreview()" style="margin-left: auto; background: #dc3545; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer;">Ã—</button>
                </div>
            `;
            preview.innerHTML = previewContent;
        }
        
        preview.style.display = 'block';
    }

    function hideFilePreview() {
        const preview = document.getElementById('file-preview');
        const fileInput = document.getElementById('media-input');
        preview.style.display = 'none';
        preview.innerHTML = '';
        fileInput.value = '';
    }

    // Make hideFilePreview global
    window.hideFilePreview = hideFilePreview;

    function startPolling() {
        if (pollInterval) {
            clearInterval(pollInterval);
        }
        
        pollInterval = setInterval(() => {
            if (currentRecipientId || currentProjectId) {
                loadMessages();
            }
        }, 3000); // Poll every 3 seconds
    }

    // Load initial data
    loadUsers();
});
</script>
{% endblock %}
